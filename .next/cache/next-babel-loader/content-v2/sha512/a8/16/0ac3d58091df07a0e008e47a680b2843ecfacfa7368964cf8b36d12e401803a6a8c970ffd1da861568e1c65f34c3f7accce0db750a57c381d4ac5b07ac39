{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar _jsxFileName = \"/Users/KZRon/Documents/75Recruit/utils/storyblok-service.js\";\nvar __jsx = React.createElement;\nimport StoryblokClient from 'storyblok-js-client';\nimport Storyblok from \"../lib/storyblok\";\nimport React from \"react\";\n\nvar StoryblokService = /*#__PURE__*/function () {\n  function StoryblokService() {\n    _classCallCheck(this, StoryblokService);\n\n    this.devMode = false; // Always loads draft\n\n    this.token = \"\".concat(process.env.STORYBLOK_75RECRUIT_API_TOKEN);\n    this.client = new StoryblokClient({\n      accessToken: this.token,\n      cache: {\n        clear: 'auto',\n        type: 'memory'\n      }\n    });\n    this.query = {};\n  }\n\n  _createClass(StoryblokService, [{\n    key: \"getCacheVersion\",\n    value: function getCacheVersion() {\n      return this.client.cacheVersion;\n    } // ask Storyblok's Content API for content of story\n\n  }, {\n    key: \"get\",\n    value: function get(slug, params) {\n      params = params || {};\n\n      if (this.getQuery('_storyblok') || this.devMode || true && window.storyblok) {\n        params.version = 'draft';\n      }\n\n      if (true && typeof window.StoryblokCacheVersion !== 'undefined') {\n        params.cv = window.StoryblokCacheVersion;\n      }\n\n      return this.client.get(slug, params);\n    } // initialize the connection between Storyblok & Next.js in Visual Editor\n\n  }, {\n    key: \"initEditor\",\n    value: function initEditor(reactComponent) {\n      if (window.storyblok) {\n        window.storyblok.init(); // reload on Next.js page on save or publish event in Storyblok Visual Editor\n\n        window.storyblok.on(['change', 'published'], function () {\n          return location.reload(true);\n        }); // Update state.story on input in Visual Editor\n        // this will alter the state and replaces the current story with a current raw story object and resolve relations\n\n        window.storyblok.on('input', function (event) {\n          if (event.story.content._uid === reactComponent.state.story.content._uid) {\n            event.story.content = window.storyblok.addComments(event.story.content, event.story.id);\n            window.storyblok.resolveRelations(event.story, ['featured-articles.articles'], function () {\n              reactComponent.setState({\n                story: event.story\n              });\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"setQuery\",\n    value: function setQuery(query) {\n      this.query = query;\n    }\n  }, {\n    key: \"getQuery\",\n    value: function getQuery(param) {\n      return this.query[param];\n    }\n  }, {\n    key: \"bridge\",\n    value: function bridge() {\n      if (!this.getQuery('_storyblok') && !this.devMode) {\n        return '';\n      }\n\n      return __jsx(\"script\", {\n        src: '//app.storyblok.com/f/storyblok-latest.js?t=' + this.token,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }\n      });\n    }\n  }]);\n\n  return StoryblokService;\n}();\n\nvar storyblokInstance = new StoryblokService();\nexport default storyblokInstance;","map":{"version":3,"sources":["/Users/KZRon/Documents/75Recruit/utils/storyblok-service.js"],"names":["StoryblokClient","Storyblok","React","StoryblokService","devMode","token","process","env","STORYBLOK_75RECRUIT_API_TOKEN","client","accessToken","cache","clear","type","query","cacheVersion","slug","params","getQuery","window","storyblok","version","StoryblokCacheVersion","cv","get","reactComponent","init","on","location","reload","event","story","content","_uid","state","addComments","id","resolveRelations","setState","param","storyblokInstance"],"mappings":"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","sourcesContent":["import StoryblokClient from 'storyblok-js-client'\nimport Storyblok from \"../lib/storyblok\";\nimport React from \"react\";\nclass StoryblokService {\n    constructor() {\n        this.devMode = false // Always loads draft\n        this.token = `${process.env.STORYBLOK_75RECRUIT_API_TOKEN}`\n        this.client = new StoryblokClient({\n            accessToken: this.token,\n            cache: {\n                clear: 'auto',\n                type: 'memory'\n            }\n        })\n\n        this.query = {}\n    }\n\n    getCacheVersion() {\n        return this.client.cacheVersion\n    }\n\n    // ask Storyblok's Content API for content of story\n    get(slug, params) {\n        params = params || {}\n\n        if (this.getQuery('_storyblok') || this.devMode || (typeof window !== 'undefined' && window.storyblok)) {\n            params.version = 'draft'\n        }\n\n        if (typeof window !== 'undefined' && typeof window.StoryblokCacheVersion !== 'undefined') {\n            params.cv = window.StoryblokCacheVersion\n        }\n\n        return this.client.get(slug, params)\n    }\n\n    // initialize the connection between Storyblok & Next.js in Visual Editor\n    initEditor(reactComponent) {\n        if (window.storyblok) {\n            window.storyblok.init()\n\n            // reload on Next.js page on save or publish event in Storyblok Visual Editor\n            window.storyblok.on(['change', 'published'], () => location.reload(true))\n\n            // Update state.story on input in Visual Editor\n            // this will alter the state and replaces the current story with a current raw story object and resolve relations\n            window.storyblok.on('input', (event) => {\n                if (event.story.content._uid === reactComponent.state.story.content._uid) {\n                    event.story.content = window.storyblok.addComments(event.story.content, event.story.id)\n                    window.storyblok.resolveRelations(event.story, ['featured-articles.articles'], () => {\n                        reactComponent.setState({\n                            story: event.story\n                        })\n                    })\n                }\n            })\n        }\n    }\n\n    setQuery(query) {\n        this.query = query\n    }\n\n    getQuery(param) {\n        return this.query[param]\n    }\n\n    bridge() {\n        if (!this.getQuery('_storyblok') && !this.devMode) {\n            return ''\n        }\n        return (<script src={'//app.storyblok.com/f/storyblok-latest.js?t=' + this.token}/>)\n    }\n}\n\nconst storyblokInstance = new StoryblokService()\n\nexport default storyblokInstance\n"]},"metadata":{},"sourceType":"module"}