{"ast":null,"code":"var __jsx = React.createElement;\nimport StoryblokClient from 'storyblok-js-client';\nimport Storyblok from \"../lib/storyblok\";\nimport React from \"react\";\n\nclass StoryblokService {\n  constructor() {\n    this.devMode = false; // Always loads draft\n\n    this.token = `${process.env.STORYBLOK_75RECRUIT_API_TOKEN}`;\n    this.client = new StoryblokClient({\n      accessToken: this.token,\n      cache: {\n        clear: 'auto',\n        type: 'memory'\n      }\n    });\n    this.query = {};\n  }\n\n  getCacheVersion() {\n    return this.client.cacheVersion;\n  } // ask Storyblok's Content API for content of story\n\n\n  get(slug, params) {\n    params = params || {};\n\n    if (this.getQuery('_storyblok') || this.devMode || false && window.storyblok) {\n      params.version = 'draft';\n    }\n\n    if (false && typeof window.StoryblokCacheVersion !== 'undefined') {\n      params.cv = window.StoryblokCacheVersion;\n    }\n\n    return this.client.get(slug, params);\n  } // initialize the connection between Storyblok & Next.js in Visual Editor\n\n\n  initEditor(reactComponent) {\n    if (window.storyblok) {\n      window.storyblok.init(); // reload on Next.js page on save or publish event in Storyblok Visual Editor\n\n      window.storyblok.on(['change', 'published'], () => location.reload(true)); // Update state.story on input in Visual Editor\n      // this will alter the state and replaces the current story with a current raw story object and resolve relations\n\n      window.storyblok.on('input', event => {\n        if (event.story.content._uid === reactComponent.state.story.content._uid) {\n          event.story.content = window.storyblok.addComments(event.story.content, event.story.id);\n          window.storyblok.resolveRelations(event.story, ['featured-articles.articles'], () => {\n            reactComponent.setState({\n              story: event.story\n            });\n          });\n        }\n      });\n    }\n  }\n\n  setQuery(query) {\n    this.query = query;\n  }\n\n  getQuery(param) {\n    return this.query[param];\n  }\n\n  bridge() {\n    if (!this.getQuery('_storyblok') && !this.devMode) {\n      return '';\n    }\n\n    return __jsx(\"script\", {\n      src: '//app.storyblok.com/f/storyblok-latest.js?t=' + this.token\n    });\n  }\n\n}\n\nconst storyblokInstance = new StoryblokService();\nexport default storyblokInstance;","map":null,"metadata":{},"sourceType":"module"}