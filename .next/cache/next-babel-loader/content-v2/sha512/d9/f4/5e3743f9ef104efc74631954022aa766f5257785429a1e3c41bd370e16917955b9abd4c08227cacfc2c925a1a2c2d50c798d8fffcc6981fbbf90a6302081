{"ast":null,"code":"var _jsxFileName = \"/Users/KZRon/Documents/75Recruit/utils/storyblok-service.js\";\nvar __jsx = React.createElement;\nimport StoryblokClient from 'storyblok-js-client';\nimport Storyblok from \"../lib/storyblok\";\nimport React from \"react\";\n\nclass StoryblokService {\n  constructor() {\n    this.devMode = false; // Always loads draft\n\n    this.token = `${process.env.STORYBLOK_75RECRUIT_API_TOKEN}`;\n    this.client = new StoryblokClient({\n      accessToken: this.token,\n      cache: {\n        clear: 'auto',\n        type: 'memory'\n      }\n    });\n    this.query = {};\n  }\n\n  getCacheVersion() {\n    return this.client.cacheVersion;\n  } // ask Storyblok's Content API for content of story\n\n\n  get(slug, params) {\n    params = params || {};\n\n    if (this.getQuery('_storyblok') || this.devMode || false && window.storyblok) {\n      params.version = 'draft';\n    }\n\n    if (false && typeof window.StoryblokCacheVersion !== 'undefined') {\n      params.cv = window.StoryblokCacheVersion;\n    }\n\n    return this.client.get(slug, params);\n  } // initialize the connection between Storyblok & Next.js in Visual Editor\n\n\n  initEditor(reactComponent) {\n    if (window.storyblok) {\n      window.storyblok.init(); // reload on Next.js page on save or publish event in Storyblok Visual Editor\n\n      window.storyblok.on(['change', 'published'], () => location.reload(true)); // Update state.story on input in Visual Editor\n      // this will alter the state and replaces the current story with a current raw story object and resolve relations\n\n      window.storyblok.on('input', event => {\n        if (event.story.content._uid === reactComponent.state.story.content._uid) {\n          event.story.content = window.storyblok.addComments(event.story.content, event.story.id);\n          window.storyblok.resolveRelations(event.story, ['featured-articles.articles'], () => {\n            reactComponent.setState({\n              story: event.story\n            });\n          });\n        }\n      });\n    }\n  }\n\n  setQuery(query) {\n    this.query = query;\n  }\n\n  getQuery(param) {\n    return this.query[param];\n  }\n\n  bridge() {\n    if (!this.getQuery('_storyblok') && !this.devMode) {\n      return '';\n    }\n\n    return __jsx(\"script\", {\n      src: '//app.storyblok.com/f/storyblok-latest.js?t=' + this.token,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    });\n  }\n\n}\n\nconst storyblokInstance = new StoryblokService();\nexport default storyblokInstance;","map":{"version":3,"sources":["/Users/KZRon/Documents/75Recruit/utils/storyblok-service.js"],"names":["StoryblokClient","Storyblok","React","StoryblokService","constructor","devMode","token","process","env","STORYBLOK_75RECRUIT_API_TOKEN","client","accessToken","cache","clear","type","query","getCacheVersion","cacheVersion","get","slug","params","getQuery","window","storyblok","version","StoryblokCacheVersion","cv","initEditor","reactComponent","init","on","location","reload","event","story","content","_uid","state","addComments","id","resolveRelations","setState","setQuery","param","bridge","storyblokInstance"],"mappings":"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","sourcesContent":["import StoryblokClient from 'storyblok-js-client'\nimport Storyblok from \"../lib/storyblok\";\nimport React from \"react\";\nclass StoryblokService {\n    constructor() {\n        this.devMode = false // Always loads draft\n        this.token = `${process.env.STORYBLOK_75RECRUIT_API_TOKEN}`\n        this.client = new StoryblokClient({\n            accessToken: this.token,\n            cache: {\n                clear: 'auto',\n                type: 'memory'\n            }\n        })\n\n        this.query = {}\n    }\n\n    getCacheVersion() {\n        return this.client.cacheVersion\n    }\n\n    // ask Storyblok's Content API for content of story\n    get(slug, params) {\n        params = params || {}\n\n        if (this.getQuery('_storyblok') || this.devMode || (typeof window !== 'undefined' && window.storyblok)) {\n            params.version = 'draft'\n        }\n\n        if (typeof window !== 'undefined' && typeof window.StoryblokCacheVersion !== 'undefined') {\n            params.cv = window.StoryblokCacheVersion\n        }\n\n        return this.client.get(slug, params)\n    }\n\n    // initialize the connection between Storyblok & Next.js in Visual Editor\n    initEditor(reactComponent) {\n        if (window.storyblok) {\n            window.storyblok.init()\n\n            // reload on Next.js page on save or publish event in Storyblok Visual Editor\n            window.storyblok.on(['change', 'published'], () => location.reload(true))\n\n            // Update state.story on input in Visual Editor\n            // this will alter the state and replaces the current story with a current raw story object and resolve relations\n            window.storyblok.on('input', (event) => {\n                if (event.story.content._uid === reactComponent.state.story.content._uid) {\n                    event.story.content = window.storyblok.addComments(event.story.content, event.story.id)\n                    window.storyblok.resolveRelations(event.story, ['featured-articles.articles'], () => {\n                        reactComponent.setState({\n                            story: event.story\n                        })\n                    })\n                }\n            })\n        }\n    }\n\n    setQuery(query) {\n        this.query = query\n    }\n\n    getQuery(param) {\n        return this.query[param]\n    }\n\n    bridge() {\n        if (!this.getQuery('_storyblok') && !this.devMode) {\n            return ''\n        }\n        return (<script src={'//app.storyblok.com/f/storyblok-latest.js?t=' + this.token}/>)\n    }\n}\n\nconst storyblokInstance = new StoryblokService()\n\nexport default storyblokInstance\n"]},"metadata":{},"sourceType":"module"}