{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar __jsx = React.createElement;\nimport StoryblokClient from 'storyblok-js-client';\nimport Storyblok from \"../lib/storyblok\";\nimport React from \"react\";\n\nvar StoryblokService = /*#__PURE__*/function () {\n  function StoryblokService() {\n    _classCallCheck(this, StoryblokService);\n\n    this.devMode = false; // Always loads draft\n\n    this.token = \"\".concat(process.env.STORYBLOK_75RECRUIT_API_TOKEN);\n    this.client = new StoryblokClient({\n      accessToken: this.token,\n      cache: {\n        clear: 'auto',\n        type: 'memory'\n      }\n    });\n    this.query = {};\n  }\n\n  _createClass(StoryblokService, [{\n    key: \"getCacheVersion\",\n    value: function getCacheVersion() {\n      return this.client.cacheVersion;\n    } // ask Storyblok's Content API for content of story\n\n  }, {\n    key: \"get\",\n    value: function get(slug, params) {\n      params = params || {};\n\n      if (this.getQuery('_storyblok') || this.devMode || true && window.storyblok) {\n        params.version = 'draft';\n      }\n\n      if (true && typeof window.StoryblokCacheVersion !== 'undefined') {\n        params.cv = window.StoryblokCacheVersion;\n      }\n\n      return this.client.get(slug, params);\n    } // initialize the connection between Storyblok & Next.js in Visual Editor\n\n  }, {\n    key: \"initEditor\",\n    value: function initEditor(reactComponent) {\n      if (window.storyblok) {\n        window.storyblok.init(); // reload on Next.js page on save or publish event in Storyblok Visual Editor\n\n        window.storyblok.on(['change', 'published'], function () {\n          return location.reload(true);\n        }); // Update state.story on input in Visual Editor\n        // this will alter the state and replaces the current story with a current raw story object and resolve relations\n\n        window.storyblok.on('input', function (event) {\n          if (event.story.content._uid === reactComponent.state.story.content._uid) {\n            event.story.content = window.storyblok.addComments(event.story.content, event.story.id);\n            window.storyblok.resolveRelations(event.story, ['featured-articles.articles'], function () {\n              reactComponent.setState({\n                story: event.story\n              });\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"setQuery\",\n    value: function setQuery(query) {\n      this.query = query;\n    }\n  }, {\n    key: \"getQuery\",\n    value: function getQuery(param) {\n      return this.query[param];\n    }\n  }, {\n    key: \"bridge\",\n    value: function bridge() {\n      if (!this.getQuery('_storyblok') && !this.devMode) {\n        return '';\n      }\n\n      return __jsx(\"script\", {\n        src: '//app.storyblok.com/f/storyblok-latest.js?t=' + this.token\n      });\n    }\n  }]);\n\n  return StoryblokService;\n}();\n\nvar storyblokInstance = new StoryblokService();\nexport default storyblokInstance;","map":null,"metadata":{},"sourceType":"module"}